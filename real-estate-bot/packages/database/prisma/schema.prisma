generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id        String   @id @default(uuid())
  tgId      BigInt   @unique
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preferences     Preferences[]
  savedQueries    SavedQuery[]
  recommendations Recommendation[]
  clicks          Click[]
  feedback        Feedback[]

  @@index([tgId])
}

model Preferences {
  id        String   @id @default(uuid())
  userId    String
  mode      String   // 'life' | 'invest'
  weights   Json     // PreferenceWeights
  budgetMin Float?
  budgetMax Float?
  locations String[]
  commutePoints Json[] // CommutePoint[]
  transportMode String? // 'car' | 'public' | 'walk'
  rooms     Int[]
  areaMin   Float?
  areaMax   Float?
  newBuilding Boolean?
  parkingRequired Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedQueries SavedQuery[]

  @@index([userId])
}

model SavedQuery {
  id             String   @id @default(uuid())
  userId         String
  preferencesId  String
  status         String   // 'active' | 'paused'
  thresholdMatch Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Preferences @relation(fields: [preferencesId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model ListingCache {
  id         String   @id @default(uuid())
  provider   String
  externalId String
  raw        Json
  normalized Json     // Listing object
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recommendations Recommendation[]
  clicks          Click[]

  @@unique([provider, externalId])
  @@index([provider, updatedAt])
}

model Recommendation {
  id          String   @id @default(uuid())
  userId      String
  listingId   String
  matchScore  Float
  breakdown   Json     // MatchBreakdown
  explanation String
  createdAt   DateTime @default(now())

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing  ListingCache @relation(fields: [listingId], references: [id], onDelete: Cascade)
  feedback Feedback[]

  @@index([userId, matchScore])
  @@index([userId, createdAt])
}

model Click {
  id          String   @id @default(uuid())
  userId      String
  listingId   String
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  sessionId   String
  createdAt   DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing ListingCache @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

model Feedback {
  id               String   @id @default(uuid())
  userId           String
  recommendationId String
  action           String   // 'like' | 'dislike' | 'hide'
  reason           String?
  weightsDelta     Json?    // Partial<PreferenceWeights>
  createdAt        DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
}

model KnowledgeDocument {
  id         String                      @id @default(uuid())
  title      String
  sourceUrl  String?
  meta       Json
  content    String                      @db.Text
  embedding  Unsupported("vector(1536)")?
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt

  @@index([title])
}