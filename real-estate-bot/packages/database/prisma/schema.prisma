generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id        String   @id @default(uuid())
  tgId      BigInt   @unique
  phone     String?
  email     String?
  firstName String?
  lastName  String?
  username  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meta      Json?

  preferences     Preferences[]
  savedQueries    SavedQuery[]
  recommendations Recommendation[]
  clicks          Click[]
  feedback        Feedback[]
  subscriptions   Subscription[]
  notifications   Notification[]

  @@index([tgId])
}

model Preferences {
  id        String   @id @default(uuid())
  userId    String
  mode      String   // 'life' | 'invest'
  weights   Json     // PreferenceWeights
  budgetMin Float?
  budgetMax Float?
  locations String[]
  districts String[]
  commutePoints Json[] // CommutePoint[]
  transportMode String? // 'car' | 'public' | 'walk'
  rooms     Int[]
  areaMin   Float?
  areaMax   Float?
  propertyType String? // 'new' | 'secondary' | 'any'
  newBuilding Boolean?
  parkingRequired Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedQueries SavedQuery[]
  subscriptions Subscription[]

  @@index([userId])
}

model SavedQuery {
  id             String   @id @default(uuid())
  userId         String
  preferencesId  String
  status         String   // 'active' | 'paused'
  thresholdMatch Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Preferences @relation(fields: [preferencesId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}



model Feedback {
  id               String   @id @default(uuid())
  userId           String
  recommendationId String
  action           String   // 'like' | 'dislike' | 'hide'
  reason           String?
  weightsDelta     Json?    // Partial<PreferenceWeights>
  createdAt        DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
}

model KnowledgeDocument {
  id         String                      @id @default(uuid())
  type       String                      // pdf, url, text, faq, guide
  title      String
  content    String                      @db.Text
  sourceUrl  String?
  metadata   Json                        @default("{}")
  embedding  Unsupported("vector(1536)")?
  chunkIndex Int?
  parentId   String?
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt

  // Relations
  parent     KnowledgeDocument?          @relation("DocumentChunks", fields: [parentId], references: [id])
  chunks     KnowledgeDocument[]         @relation("DocumentChunks")

  @@index([title])
  @@index([type])
  @@index([parentId])
}

model Subscription {
  id                   String         @id @default(uuid())
  userId               String
  preferencesId        String
  active               Boolean        @default(true)
  notificationsEnabled Boolean        @default(true)
  frequency            String         @default("daily")
  lastChecked          DateTime?
  minScore             Float          @default(7.0)
  maxPriceIncrease     Float?
  createdAt            DateTime       @default(now())

  // Relations
  user                 User           @relation(fields: [userId], references: [id])
  preferences          Preferences    @relation(fields: [preferencesId], references: [id])
  notifications        Notification[]

  @@index([userId])
  @@index([preferencesId])
}

model Listing {
  id          String   @id @default(uuid())
  externalId  String
  provider    String
  title       String
  price       Float
  address     String
  district    String?
  metro       String?
  metroDistance Json?  // { minutes: number, transport: string }
  rooms       Int
  area        Float
  floor       Int?
  floors      Int?
  description String?  @db.Text
  images      String[]
  url         String
  source      String
  coordinates Json?    // { lat: number, lng: number }
  features    String[]
  partnerData Json?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recommendations Recommendation[]
  clicks          Click[]
  notifications   Notification[]

  @@unique([provider, externalId])
  @@index([provider])
  @@index([publishedAt])
}

model Recommendation {
  id          String   @id @default(uuid())
  userId      String
  listingId   String
  score       Float
  breakdown   Json     // MatchBreakdown
  explanation String   @db.Text
  createdAt   DateTime @default(now())

  // Relations
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing  Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  feedback Feedback[]

  @@index([userId, score])
  @@index([userId, createdAt])
}

model Click {
  id          String   @id @default(uuid())
  userId      String
  listingId   String
  url         String
  source      String?  // bot, mini_app, etc
  timestamp   DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

model Notification {
  id             String       @id @default(uuid())
  userId         String
  subscriptionId String?
  listingId      String?
  type           String       // new_listing, price_drop, etc
  message        String       @db.Text
  sentAt         DateTime     @default(now())
  read           Boolean      @default(false)

  // Relations
  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  listing        Listing?     @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
}

model ListingCache {
  id         String   @id @default(uuid())
  provider   String
  externalId String
  raw        Json
  normalized Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provider, externalId])
}