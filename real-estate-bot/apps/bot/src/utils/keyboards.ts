import { InlineKeyboard } from 'grammy';

// Main menu keyboard
export const mainMenuKeyboard = new InlineKeyboard()
  .text('üè† –ù–∞–π—Ç–∏ –∂–∏–ª—å–µ', 'search_life')
  .text('üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'search_invest')
  .row()
  .text('üìã –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', 'my_queries')
  .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings');

// Mode selection keyboard
export const modeSelectionKeyboard = new InlineKeyboard()
  .text('üè† –î–ª—è –∂–∏–∑–Ω–∏', 'mode_life')
  .row()
  .text('üí∞ –î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', 'mode_invest')
  .row()
  .text('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_menu');

// Yes/No keyboard
export const yesNoKeyboard = new InlineKeyboard()
  .text('‚úÖ –î–∞', 'yes')
  .text('‚ùå –ù–µ—Ç', 'no');

// Skip keyboard
export const skipKeyboard = new InlineKeyboard()
  .text('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip');

// Transport mode keyboard
export const transportModeKeyboard = new InlineKeyboard()
  .text('üöó –ù–∞ –º–∞—à–∏–Ω–µ', 'transport_car')
  .row()
  .text('üöá –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', 'transport_public')
  .row()
  .text('üö∂ –ü–µ—à–∫–æ–º', 'transport_walk');

// Rooms selection keyboard
export const roomsKeyboard = new InlineKeyboard()
  .text('–°—Ç—É–¥–∏—è', 'rooms_0')
  .text('1', 'rooms_1')
  .text('2', 'rooms_2')
  .row()
  .text('3', 'rooms_3')
  .text('4', 'rooms_4')
  .text('5+', 'rooms_5')
  .row()
  .text('‚úÖ –ì–æ—Ç–æ–≤–æ', 'rooms_done');

// Importance scale keyboard (1-10)
export function createImportanceKeyboard(factor: string): InlineKeyboard {
  const keyboard = new InlineKeyboard();
  
  // First row: 1-5
  for (let i = 1; i <= 5; i++) {
    keyboard.text(i.toString(), `importance_${factor}_${i}`);
  }
  keyboard.row();
  
  // Second row: 6-10
  for (let i = 6; i <= 10; i++) {
    keyboard.text(i.toString(), `importance_${factor}_${i}`);
  }
  
  return keyboard;
}

// Result actions keyboard
export const resultActionsKeyboard = new InlineKeyboard()
  .text('üëç –ü–æ–¥—Ö–æ–¥–∏—Ç', 'result_like')
  .text('üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', 'result_dislike')
  .row()
  .text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', 'result_next')
  .text('üì± –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'result_app')
  .row()
  .text('üîî –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', 'enable_monitoring')
  .text('‚Ü©Ô∏è –í –º–µ–Ω—é', 'back_to_menu');

// Feedback reasons keyboard
export const feedbackReasonsKeyboard = new InlineKeyboard()
  .text('üí∏ –î–æ—Ä–æ–≥–æ', 'feedback_expensive')
  .text('üìç –î–∞–ª–µ–∫–æ', 'feedback_far')
  .row()
  .text('üèó –°—Ç–∞–¥–∏—è —Å—Ç—Ä–æ–π–∫–∏', 'feedback_stage')
  .text('üè¢ –≠—Ç–∞–∂', 'feedback_floor')
  .row()
  .text('üìê –ü–ª–æ—â–∞–¥—å', 'feedback_area')
  .text('üèò –†–∞–π–æ–Ω', 'feedback_district')
  .row()
  .text('üí¨ –î—Ä—É–≥–æ–µ', 'feedback_other')
  .text('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'feedback_skip');

// Settings keyboard
export const settingsKeyboard = new InlineKeyboard()
  .text('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', 'edit_preferences')
  .row()
  .text('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notification_settings')
  .row()
  .text('üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'delete_data')
  .row()
  .text('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_menu');

// Helper to create pagination keyboard
export function createPaginationKeyboard(current: number, total: number, prefix: string): InlineKeyboard {
  const keyboard = new InlineKeyboard();
  
  if (current > 0) {
    keyboard.text('‚¨ÖÔ∏è', `${prefix}_prev`);
  }
  
  keyboard.text(`${current + 1}/${total}`, `${prefix}_page`);
  
  if (current < total - 1) {
    keyboard.text('‚û°Ô∏è', `${prefix}_next`);
  }
  
  return keyboard;
}