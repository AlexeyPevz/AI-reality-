import { prisma, Subscription, User as DbUser } from '@real-estate-bot/database';
import type { Listing, MatchResult } from '@real-estate-bot/shared';
import { searchAndScoreListings } from './search.service';
import { Bot } from 'grammy';
import { formatPrice } from '@real-estate-bot/shared';

type User = DbUser;

export class MonitoringService {
  constructor(private bot: Bot) {}

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  async checkAllSubscriptions(): Promise<void> {
    console.log('Starting subscription check...');
    
    const activeSubscriptions = await prisma.subscription.findMany({
      where: {
        active: true,
        notificationsEnabled: true
      },
      include: {
        user: true,
        preferences: true
      }
    });

    console.log(`Found ${activeSubscriptions.length} active subscriptions`);

    for (const subscription of activeSubscriptions) {
      try {
        await this.checkSubscription(subscription as any);
      } catch (error) {
        console.error(`Error checking subscription ${subscription.id}:`, error);
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  private async checkSubscription(subscription: any): Promise<void> {
    const { user, preferences } = subscription;
    
    if (!preferences) {
      console.log(`No preferences for subscription ${subscription.id}`);
      return;
    }

    const lastCheck = subscription.lastChecked || new Date(Date.now() - 24 * 60 * 60 * 1000);

    // –ò—â–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const results = await searchAndScoreListings(preferences as any);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å —Ö–æ—Ä–æ—à–∏–º score
    const newListings = results
      .filter((result: MatchResult) => {
        const createdAt = (result.listing as any)?.createdAt
          ? new Date((result.listing as any).createdAt)
          : new Date();
        const isNew = createdAt > lastCheck;
        const hasGoodScore = result.matchScore >= (subscription.minScore || 7.0);
        return isNew && hasGoodScore && !!result.listing;
      })
      .map(r => ({ listing: r.listing as Listing, matchScore: r.matchScore, explanation: r.explanation }));

    if (newListings.length > 0) {
      await this.sendNotifications(user, newListings, subscription);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await prisma.subscription.update({
      where: { id: subscription.id },
      data: { lastChecked: new Date() }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendNotifications(
    user: User,
    listings: Array<{ listing: Listing; matchScore: number; explanation: string }>,
    subscription: Subscription
  ): Promise<void> {
    const count = Math.min(listings.length, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –æ–±—ä–µ–∫—Ç–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    const topListings = listings.slice(0, count);

    let message = `üîî <b>–ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!</b>\n\n`;
    
    for (const { listing, matchScore, explanation } of topListings) {
      message += `üè† <b>${listing.title}</b>\n`;
      message += `üí∞ ${formatPrice(listing.price)}\n`;
      if (listing.district) message += `üìç ${listing.district}`;
      if (listing.metro) {
        message += ` ‚Ä¢ ${listing.metro}`;
      }
      message += `\n`;
      message += `‚≠ê –û—Ü–µ–Ω–∫–∞: ${matchScore.toFixed(1)}/10\n`;
      
      // –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
      const shortExplanation = explanation.split('.')[0] + '.';
      message += `üí° ${shortExplanation}\n`;
      
      // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç
      if ((listing as any).url) {
        message += `\n<a href="${(listing as any).url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç</a>\n`;
      }
      message += '\n---\n\n';
    }

    if (listings.length > count) {
      message += `\n–ò –µ—â–µ ${listings.length - count} –æ–±—ä–µ–∫—Ç–æ–≤!\n`;
    }

    message += `\n<a href="${process.env.MINI_APP_URL}">–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≤ Mini App</a>`;

    try {
      await this.bot.api.sendMessage(user.tgId as any, message, {
        parse_mode: 'HTML',
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      for (const { listing } of topListings) {
        await prisma.notification.create({
          data: {
            userId: user.id,
            subscriptionId: subscription.id,
            listingId: listing.id,
            type: 'new_listing',
            message: message.substring(0, 500),
            sentAt: new Date()
          }
        });
      }
    } catch (error) {
      console.error(`Failed to send notification to user ${user.tgId}:`, error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createSubscription(
    userId: string,
    preferencesId: string,
    settings?: {
      notificationsEnabled?: boolean;
      minScore?: number;
      maxPriceIncrease?: number;
    }
  ): Promise<Subscription> {
    return prisma.subscription.create({
      data: {
        userId,
        preferencesId,
        active: true,
        notificationsEnabled: settings?.notificationsEnabled ?? true,
        minScore: settings?.minScore ?? 7.0,
        maxPriceIncrease: settings?.maxPriceIncrease,
        createdAt: new Date()
      }
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  async updateSubscription(
    subscriptionId: string,
    settings: {
      active?: boolean;
      notificationsEnabled?: boolean;
      minScore?: number;
      maxPriceIncrease?: number;
    }
  ): Promise<Subscription> {
    return prisma.subscription.update({
      where: { id: subscriptionId },
      data: settings
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserSubscriptions(userId: string): Promise<Subscription[]> {
    return prisma.subscription.findMany({
      where: { userId },
      include: {
        preferences: true,
        notifications: {
          orderBy: { sentAt: 'desc' },
          take: 5
        }
      }
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  async deleteSubscription(subscriptionId: string): Promise<void> {
    await prisma.subscription.delete({
      where: { id: subscriptionId }
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
  async getNotificationStats(userId: string): Promise<{
    totalSent: number;
    lastSent?: Date;
    byType: Record<string, number>;
  }> {
    const notifications = await prisma.notification.findMany({
      where: { userId }
    });

    const byType = notifications.reduce((acc: Record<string, number>, notif: any) => {
      acc[notif.type] = (acc[notif.type] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return {
      totalSent: notifications.length,
      lastSent: notifications[0]?.sentAt,
      byType
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
export function startMonitoringJob(bot: Bot): void {
  const monitoringService = new MonitoringService(bot);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  const INTERVAL = 2 * 60 * 60 * 1000; // 2 hours
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  setTimeout(() => {
    monitoringService.checkAllSubscriptions()
      .catch(error => console.error('Monitoring job error:', error));
  }, 60 * 1000);

  // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
  setInterval(() => {
    monitoringService.checkAllSubscriptions()
      .catch(error => console.error('Monitoring job error:', error));
  }, INTERVAL);

  console.log('Background monitoring started (checking every 2 hours)');
}