import { InlineKeyboard } from 'grammy';
import { MonitoringService } from '../services/monitoring.service';
import { formatPrice } from '@real-estate-bot/shared';
import type { BotContext } from '../types';

export async function subscriptionsCommand(ctx: BotContext) {
  if (!ctx.from) return;
  
  const monitoringService = new MonitoringService(ctx.api as any);
  const subscriptions = await monitoringService.getUserSubscriptions(ctx.session.userId!);
  
  if (subscriptions.length === 0) {
    await ctx.reply(
      'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã.\n\n' +
      '–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /search –∏ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
      { parse_mode: 'HTML' }
    );
    return;
  }

  let message = 'üîî <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n';
  
  const keyboard = new InlineKeyboard();
  
  for (const sub of subscriptions as any[]) {
    const emoji = sub.active ? '‚úÖ' : '‚è∏';
    const mode = sub.preferences?.mode === 'life' ? 'üè† –î–ª—è –∂–∏–∑–Ω–∏' : 'üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏';
    
    message += `${emoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞ #${sub.id.slice(-6)}</b>\n`;
    message += `${mode}\n`;
    message += `üìä –ú–∏–Ω. –æ—Ü–µ–Ω–∫–∞: ${sub.minScore}/10\n`;
    
    if (sub.preferences) {
      const pref = sub.preferences;
      if (pref.budgetMax) {
        message += `üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ ${formatPrice(pref.budgetMax)}\n`;
      }
      if ((pref as any).districts?.length) {
        const districts = (pref as any).districts as string[];
        message += `üìç –†–∞–π–æ–Ω—ã: ${districts.slice(0, 3).join(', ')}`;
        if (districts.length > 3) {
          message += ` +${districts.length - 3}`;
        }
        message += '\n';
      }
    }
    
    if (sub.lastChecked) {
      const lastCheck = new Date(sub.lastChecked);
      const hoursAgo = Math.floor((Date.now() - lastCheck.getTime()) / (1000 * 60 * 60));
      message += `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${hoursAgo}—á –Ω–∞–∑–∞–¥\n`;
    }
    
    message += '\n';
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard
      .text(
        sub.active ? `‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å #${sub.id.slice(-6)}` : `‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å #${sub.id.slice(-6)}`,
        `sub_toggle_${sub.id}`
      )
      .text(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ #${sub.id.slice(-6)}`, `sub_settings_${sub.id}`)
      .row();
  }
  
  keyboard.text('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É', 'sub_create');
  
  await ctx.reply(message, {
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

export async function handleSubscriptionCallback(ctx: BotContext) {
  const data = ctx.callbackQuery?.data;
  if (!data) return;
  
  const monitoringService = new MonitoringService(ctx.api as any);
  
  if (data.startsWith('sub_toggle_')) {
    const id = data.replace('sub_toggle_', '');
    const subs = await monitoringService.getUserSubscriptions(ctx.session.userId!);
    const sub = subs.find(s => s.id === id);
    if (!sub) return;
    await monitoringService.updateSubscription(id, { active: !sub.active });
    await ctx.answerCallbackQuery(`–°—Ç–∞—Ç—É—Å: ${!sub.active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  }
}

export async function createSubscriptionAfterSearch(ctx: BotContext, preferencesId: string) {
  const keyboard = new InlineKeyboard()
    .text('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', `enable_notifications_${preferencesId}`)
    .text('‚ùå –ù–µ –Ω–∞–¥–æ', 'close');
  
  await ctx.reply(
    'üí° <b>–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö?</b>\n\n' +
    '–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–æ—Ü–µ–Ω–∫–∞ 7.0+).\n\n' +
    '–í—ã —Å–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscriptions',
    {
      parse_mode: 'HTML',
      reply_markup: keyboard
    }
  );
}

export async function handleNotificationToggle(ctx: BotContext) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith('enable_notifications_')) return;
  
  const preferencesId = data.replace('enable_notifications_', '');
  const monitoringService = new MonitoringService(ctx.api as any);
  
  try {
    await monitoringService.createSubscription(
      ctx.session.userId!,
      preferencesId,
      {
        notificationsEnabled: true,
        minScore: 7.0
      }
    );
    
    await ctx.answerCallbackQuery('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!');
    await ctx.editMessageText(
      '‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö.\n\n' +
      '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: /subscriptions',
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Error creating subscription:', error);
    await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
}