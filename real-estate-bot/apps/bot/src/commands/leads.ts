import { Context } from 'grammy';
import { InlineKeyboard } from 'grammy';
import { leadService } from '../services/lead.service';
import { leadDistribution } from '../services/lead-distribution.service';
import { formatPrice } from '@real-estate-bot/shared';

export async function leadsCommand(ctx: Context) {
  // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  const adminIds = process.env.ADMIN_IDS?.split(',') || [];
  if (!adminIds.includes(ctx.from?.id.toString() || '')) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    return;
  }

  const keyboard = new InlineKeyboard()
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'leads_stats')
    .text('üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', 'leads_hot')
    .row()
    .text('üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏', 'leads_buyers')
    .text('üíµ –î–æ—Ö–æ–¥—ã', 'leads_revenue');

  await ctx.reply(
    'üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏</b>\n\n' +
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏–¥–∞–º–∏.',
    {
      parse_mode: 'HTML',
      reply_markup: keyboard
    }
  );
}

export async function handleLeadsCallback(ctx: Context) {
  const data = ctx.callbackQuery?.data;
  
  switch (data) {
    case 'leads_stats':
      await showLeadStats(ctx);
      break;
    case 'leads_hot':
      await showHotLeads(ctx);
      break;
    case 'leads_buyers':
      await showBuyers(ctx);
      break;
    case 'leads_revenue':
      await showRevenue(ctx);
      break;
  }
  
  await ctx.answerCallbackQuery();
}

async function showLeadStats(ctx: Context) {
  const stats = await leadService.getLeadStats();
  
  const message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤</b>\n\n` +
    `–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: <b>${stats.total}</b>\n\n` +
    `<b>–ü–æ –∫–∞—á–µ—Å—Ç–≤—É:</b>\n` +
    `üî• –ì–æ—Ä—è—á–∏–µ: ${stats.byQuality.hot}\n` +
    `üå° –¢–µ–ø–ª—ã–µ: ${stats.byQuality.warm}\n` +
    `‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${stats.byQuality.cold}\n\n` +
    `<b>–ü–æ —Å—Ç–∞—Ç—É—Å—É:</b>\n` +
    `üÜï –ù–æ–≤—ã–µ: ${stats.byStatus.new}\n` +
    `‚úÖ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${stats.byStatus.qualified}\n` +
    `üìû –í —Ä–∞–±–æ—Ç–µ: ${stats.byStatus.contacted}\n` +
    `üí∞ –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ: ${stats.byStatus.sold}\n` +
    `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: ${stats.byStatus.rejected}\n\n` +
    `<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
    `üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatPrice(stats.totalRevenue)}\n` +
    `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–∏–¥–∞: ${formatPrice(stats.avgLeadPrice)}`;

  await ctx.reply(message, { parse_mode: 'HTML' });
}

async function showHotLeads(ctx: Context) {
  const hotLeads = await leadService.getHotLeads(10);
  
  if (hotLeads.length === 0) {
    await ctx.reply('üî• –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    return;
  }

  let message = 'üî• <b>–ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã (—Ç–æ–ø 10)</b>\n\n';
  
  for (const lead of hotLeads) {
    const potentialRevenue = leadDistribution.calculatePotentialRevenue(lead);
    
    message += `<b>–õ–∏–¥ #${lead.id}</b>\n`;
    message += `üìä Score: ${lead.score}/100\n`;
    message += `üí∞ –ë—é–¥–∂–µ—Ç: ${formatPrice(lead.budget.min || 0)} - ${formatPrice(lead.budget.max || 0)}\n`;
    message += `üìç –õ–æ–∫–∞—Ü–∏–∏: ${lead.locations.join(', ')}\n`;
    message += `üè† –ö–æ–º–Ω–∞—Ç: ${lead.rooms?.join(', ') || '–ª—é–±–æ–µ'}\n`;
    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${lead.phone ? '‚úÖ' : '‚ùå'}\n`;
    message += `üíµ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${formatPrice(potentialRevenue)}\n`;
    message += `‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${new Date(lead.lastActivity).toLocaleDateString()}\n\n`;
  }

  const keyboard = new InlineKeyboard()
    .text('üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV', 'leads_export_hot')
    .text('üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ', 'leads_distribute_all');

  await ctx.reply(message, { 
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

async function showBuyers(ctx: Context) {
  const buyerStats = leadDistribution.getBuyerStats();
  
  let message = 'üíº <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ª–∏–¥–æ–≤</b>\n\n';
  
  for (const stat of buyerStats) {
    const buyer = stat.buyer;
    
    message += `<b>${buyer.name}</b> (${buyer.type})\n`;
    message += `üí∞ –¶–µ–Ω—ã: üî•${formatPrice(buyer.pricePerLead.hot)} | `;
    message += `üå°${formatPrice(buyer.pricePerLead.warm)} | `;
    message += `‚ùÑÔ∏è${formatPrice(buyer.pricePerLead.cold)}\n`;
    message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n`;
    message += `  –î–µ–Ω—å: ${stat.utilizationDaily.toFixed(0)}% (${buyer.currentDaily}/${buyer.dailyLimit || '‚àû'})\n`;
    message += `  –ú–µ—Å—è—Ü: ${stat.utilizationMonthly.toFixed(0)}% (${buyer.currentMonthly}/${buyer.monthlyLimit || '‚àû'})\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: ${buyer.active ? '–î–∞' : '–ù–µ—Ç'}\n\n`;
  }

  await ctx.reply(message, { parse_mode: 'HTML' });
}

async function showRevenue(ctx: Context) {
  const stats = await leadService.getLeadStats();
  
  // –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  const hotLeads = await leadService.getHotLeads(100);
  let potentialRevenue = 0;
  
  for (const lead of hotLeads) {
    if (lead.status === 'new' || lead.status === 'qualified') {
      potentialRevenue += leadDistribution.calculatePotentialRevenue(lead);
    }
  }

  const message = `üí∞ <b>–î–æ—Ö–æ–¥—ã –æ—Ç –ª–∏–¥–æ–≤</b>\n\n` +
    `<b>–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥:</b>\n` +
    `üíµ –í—Å–µ–≥–æ: ${formatPrice(stats.totalRevenue)}\n` +
    `üìä –ü—Ä–æ–¥–∞–Ω–æ –ª–∏–¥–æ–≤: ${stats.byStatus.sold}\n` +
    `üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(stats.avgLeadPrice)}\n\n` +
    `<b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥:</b>\n` +
    `üî• –ì–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤: ${stats.byQuality.hot - stats.byStatus.sold}\n` +
    `üíé –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${formatPrice(potentialRevenue)}\n\n` +
    `<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:</b>\n` +
    `üìà –ü—Ä–∏ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ: ${formatPrice(stats.totalRevenue * 30 / new Date().getDate())}`;

  await ctx.reply(message, { parse_mode: 'HTML' });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
export async function handleLeadActions(ctx: Context) {
  const data = ctx.callbackQuery?.data;
  
  switch (data) {
    case 'leads_export_hot':
      await ctx.reply('üì§ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      break;
      
    case 'leads_distribute_all':
      await distributeAllHotLeads(ctx);
      break;
  }
  
  await ctx.answerCallbackQuery();
}

async function distributeAllHotLeads(ctx: Context) {
  await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤...');
  
  const hotLeads = await leadService.getHotLeads(50);
  let distributed = 0;
  let totalRevenue = 0;
  
  for (const lead of hotLeads) {
    if (lead.status === 'new' || lead.status === 'qualified') {
      const result = await leadDistribution.distributeLead(lead);
      
      if (result.distributed) {
        distributed++;
        totalRevenue += result.price || 0;
      }
    }
  }
  
  await ctx.reply(
    `‚úÖ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n` +
    `üì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${distributed} –ª–∏–¥–æ–≤\n` +
    `üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatPrice(totalRevenue)}`,
    { parse_mode: 'HTML' }
  );
}