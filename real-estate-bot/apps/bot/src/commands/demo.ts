import { Context, InlineKeyboard } from 'grammy';
import { formatPrice } from '@real-estate-bot/shared';
import type { Preferences } from '@real-estate-bot/shared';
import { searchAndScoreListings } from '../services/search.service';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–º–æ-–ø—Ä–æ—Ñ–∏–ª–∏
const DEMO_PROFILES = {
  family: {
    name: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ–ª–æ–¥–∞—è —Å–µ–º—å—è',
    description: '–ò—â–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
    preferences: {
      mode: 'life' as const,
      budgetMin: 7000000,
      budgetMax: 15000000,
      districts: ['–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π', '–•–∞–º–æ–≤–Ω–∏–∫–∏', '–¢–≤–µ—Ä—Å–∫–æ–π'],
      rooms: [2, 3],
      areaMin: 60,
      areaMax: 100,
      propertyType: 'any' as const,
      weights: {
        transport: 0.8,
        schools: 0.9,
        parks: 0.8,
        safety: 0.9 as any,
        parking: 0.7,
        infrastructure: 0.8
      }
    }
  },
  investor: {
    name: 'üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä',
    description: '–ü–æ–∫—É–ø–∫–∞ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É',
    preferences: {
      mode: 'invest' as const,
      budgetMin: 5000000,
      budgetMax: 10000000,
      districts: ['–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π', '–Æ–∂–Ω–æ–µ –ë—É—Ç–æ–≤–æ', '–ú–∞—Ä—å–∏–Ω–æ'],
      rooms: [1, 2],
      areaMin: 30,
      areaMax: 60,
      propertyType: 'new' as const,
      weights: {
        liquidity: 0.9,
        price: 0.8,
        constructionStage: 0.7,
        infrastructure: 0.6
      }
    }
  },
  luxury: {
    name: 'üíé –ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç',
    description: '–≠–ª–∏—Ç–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ',
    preferences: {
      mode: 'life' as const,
      budgetMin: 30000000,
      budgetMax: 100000000,
      districts: ['–ê—Ä–±–∞—Ç', '–ü–∞—Ç—Ä–∏–∞—Ä—à–∏–µ', '–û—Å—Ç–æ–∂–µ–Ω–∫–∞'],
      rooms: [3, 4],
      areaMin: 120,
      areaMax: 300,
      propertyType: 'any' as const,
      weights: {
        transport: 0.5,
        schools: 0.7,
        parks: 0.6,
        safety: 0.9 as any,
        parking: 0.9,
        infrastructure: 0.9
      }
    }
  },
  student: {
    name: 'üéì –°—Ç—É–¥–µ–Ω—Ç/–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
    description: '–ü–µ—Ä–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ',
    preferences: {
      mode: 'life' as const,
      budgetMin: 4000000,
      budgetMax: 7000000,
      districts: ['–ë–∏–±–∏—Ä–µ–≤–æ', '–ú–µ–¥–≤–µ–¥–∫–æ–≤–æ', '–û—Ç—Ä–∞–¥–Ω–æ–µ'],
      rooms: [0, 1], // —Å—Ç—É–¥–∏—è –∏–ª–∏ –æ–¥–Ω—É—à–∫–∞
      areaMin: 25,
      areaMax: 45,
      propertyType: 'secondary' as const,
      weights: {
        transport: 0.95,
        schools: 0.1,
        parks: 0.5,
        safety: 0.7 as any,
        parking: 0.2,
        infrastructure: 0.8
      }
    }
  }
};

export async function demoCommand(ctx: Context) {
  const keyboard = new InlineKeyboard();
  
  Object.entries(DEMO_PROFILES).forEach(([key, profile]) => {
    keyboard.text(profile.name, `demo_${key}`).row();
  });
  
  keyboard.text('‚ùå –û—Ç–º–µ–Ω–∞', 'close');
  
  await ctx.reply(
    'üéÆ <b>–î–µ–º–æ-—Ä–µ–∂–∏–º</b>\n\n' +
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ-–ø—Ä–æ—Ñ–∏–ª—å, –∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:',
    {
      parse_mode: 'HTML',
      reply_markup: keyboard
    }
  );
}

export async function handleDemoSelection(ctx: Context) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith('demo_')) return;
  
  const profileKey = data.replace('demo_', '') as keyof typeof DEMO_PROFILES;
  const profile = DEMO_PROFILES[profileKey];
  
  if (!profile) {
    await ctx.answerCallbackQuery('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  await ctx.answerCallbackQuery();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  await ctx.editMessageText(
    `‚úÖ <b>–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${profile.name}</b>\n\n` +
    `${profile.description}\n\n` +
    `üí∞ –ë—é–¥–∂–µ—Ç: ${formatPrice(profile.preferences.budgetMin)} - ${formatPrice(profile.preferences.budgetMax)}\n` +
    `üè† –ö–æ–º–Ω–∞—Ç: ${profile.preferences.rooms.join(', ')}\n` +
    `üìê –ü–ª–æ—â–∞–¥—å: ${profile.preferences.areaMin}-${profile.preferences.areaMax} –º¬≤\n` +
    `üìç –†–∞–π–æ–Ω—ã: ${profile.preferences.districts.join(', ')}\n\n` +
    `üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...`,
    { parse_mode: 'HTML' }
  );
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ preferences
  const demoPreferences: Preferences = {
    id: `demo_${Date.now()}`,
    userId: 'demo_user',
    mode: profile.preferences.mode,
    weights: profile.preferences.weights as any,
    budgetMin: profile.preferences.budgetMin,
    budgetMax: profile.preferences.budgetMax,
    locations: profile.preferences.districts,
    commutePoints: [],
    transportMode: 'public',
    rooms: profile.preferences.rooms,
    areaMin: profile.preferences.areaMin,
    areaMax: profile.preferences.areaMax,
    propertyType: profile.preferences.propertyType,
    createdAt: new Date(),
    updatedAt: new Date()
  };
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
  const results = await searchAndScoreListings(demoPreferences);
  
  if (results.length === 0) {
    await ctx.reply(
      'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–º–æ-–ø—Ä–æ—Ñ–∏–ª—å!',
      { parse_mode: 'HTML' }
    );
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  let message = `üè† <b>–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤:</b>\n\n`;
  
  for (const result of results.slice(0, 3)) {
    const listing = result.listing!;
    message += `üè¢ <b>${listing.title}</b>\n`;
    message += `üí∞ ${formatPrice(listing.price)}`;
    if (listing.area) {
      message += ` (${formatPrice(Math.round(listing.price / listing.area))}/–º¬≤)`;
    }
    message += '\n';
    if (listing.district) message += `üìç ${listing.district}`;
    if (listing.metro) {
      message += ` ‚Ä¢ ${listing.metro}`;
    }
    message += '\n';
    message += `‚≠ê –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${result.matchScore.toFixed(1)}/10\n`;
    message += `üí° ${result.explanation.split('.')[0]}.\n`;
    
    if ((listing as any).url) {
      message += `<a href="${(listing as any).url}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç</a>\n`;
    }
    message += '\n';
  }
  
  // –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
  const ctaKeyboard = new InlineKeyboard()
    .text('üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫', 'start_real_search')
    .row()
    .text('üéÆ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'demo')
    .text('‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'demo_how_it_works');
  
  await ctx.reply(message, {
    parse_mode: 'HTML',
    reply_markup: ctaKeyboard
  });
}

export async function handleDemoActions(ctx: Context) {
  const data = ctx.callbackQuery?.data;
  
  switch (data) {
    case 'start_real_search':
      await ctx.answerCallbackQuery();
      await ctx.reply(
        'üöÄ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
        { parse_mode: 'HTML' }
      );
      break;
      
    case 'demo_how_it_works':
      await ctx.answerCallbackQuery();
      await ctx.reply(
        'ü§ñ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç?</b>\n\n' +
        '1Ô∏è‚É£ <b>–£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é</b>\n' +
        '–ó–∞–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n\n' +
        '2Ô∏è‚É£ <b>Match-score –∞–ª–≥–æ—Ä–∏—Ç–º</b>\n' +
        '–û—Ü–µ–Ω–∏–≤–∞—é –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –ø–æ 10+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n\n' +
        '3Ô∏è‚É£ <b>AI –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</b>\n' +
        '–û–±—ä—è—Å–Ω—è—é, –ø–æ—á–µ–º—É –æ–±—ä–µ–∫—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç\n\n' +
        '4Ô∏è‚É£ <b>–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n' +
        '–°–ª–µ–∂—É –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ 24/7\n\n' +
        '5Ô∏è‚É£ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n' +
        '–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏! /demo',
        { parse_mode: 'HTML' }
      );
      break;
  }
}