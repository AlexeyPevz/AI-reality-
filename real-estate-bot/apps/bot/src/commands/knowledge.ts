import { Context } from 'grammy';
import { InlineKeyboard } from 'grammy';
import { documentService } from '../services/document.service';
import { ragService } from '../services/rag.service';

export async function knowledgeCommand(ctx: Context) {
  const keyboard = new InlineKeyboard()
    .text('üìö –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'kb_list')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ', 'kb_add_faq')
    .row()
    .text('üîó –î–æ–±–∞–≤–∏—Ç—å URL', 'kb_add_url')
    .text('üß™ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞', 'kb_test');

  await ctx.reply(
    'üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π</b>\n\n' +
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ FAQ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞.',
    {
      parse_mode: 'HTML',
      reply_markup: keyboard
    }
  );
}

export async function handleKnowledgeCallback(ctx: Context) {
  const data = ctx.callbackQuery?.data;
  
  switch (data) {
    case 'kb_list':
      await listDocuments(ctx);
      break;
    case 'kb_add_faq':
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ FAQ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–í–æ–ø—Ä–æ—Å: –í–∞—à –≤–æ–ø—Ä–æ—Å?\n–û—Ç–≤–µ—Ç: –í–∞—à –æ—Ç–≤–µ—Ç');
      ctx.session.waitingFor = 'faq_input';
      break;
    case 'kb_add_url':
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:');
      ctx.session.waitingFor = 'url_input';
      break;
    case 'kb_test':
      await ctx.reply('–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:');
      ctx.session.waitingFor = 'kb_query';
      break;
  }
  
  await ctx.answerCallbackQuery();
}

async function listDocuments(ctx: Context) {
  const docs = await documentService.getDocuments();
  
  if (docs.length === 0) {
    await ctx.reply('üì≠ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞');
    return;
  }
  
  let message = 'üìö <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:</b>\n\n';
  
  for (const doc of docs) {
    const chunksCount = await prisma.knowledgeDocument.count({
      where: { parentId: doc.id }
    });
    
    message += `üìÑ <b>${doc.title}</b>\n`;
    message += `   –¢–∏–ø: ${doc.type}\n`;
    message += `   –ß–∞–Ω–∫–æ–≤: ${chunksCount}\n`;
    message += `   –î–æ–±–∞–≤–ª–µ–Ω: ${doc.createdAt.toLocaleDateString()}\n\n`;
  }
  
  await ctx.reply(message, { parse_mode: 'HTML' });
}

// Handle text input for knowledge base
export async function handleKnowledgeInput(ctx: Context) {
  const waitingFor = ctx.session.waitingFor;
  const text = ctx.message?.text;
  
  if (!waitingFor || !text) return false;
  
  switch (waitingFor) {
    case 'faq_input':
      await handleFAQInput(ctx, text);
      break;
    case 'url_input':
      await handleURLInput(ctx, text);
      break;
    case 'kb_query':
      await handleKBQuery(ctx, text);
      break;
    default:
      return false;
  }
  
  ctx.session.waitingFor = undefined;
  return true;
}

async function handleFAQInput(ctx: Context, text: string) {
  const match = text.match(/–í–æ–ø—Ä–æ—Å:\s*(.+?)\n–û—Ç–≤–µ—Ç:\s*(.+)/s);
  
  if (!match) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n–í–æ–ø—Ä–æ—Å: ...\n–û—Ç–≤–µ—Ç: ...');
    return;
  }
  
  const [, question, answer] = match;
  
  try {
    await ragService.addFAQ(question.trim(), answer.trim());
    await ctx.reply('‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!');
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ');
    console.error('FAQ add error:', error);
  }
}

async function handleURLInput(ctx: Context, url: string) {
  if (!url.startsWith('http')) {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL');
    return;
  }
  
  await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...');
  
  try {
    const doc = await documentService.ingestDocument({
      type: 'url',
      title: url,
      url: url
    });
    
    const chunksCount = await prisma.knowledgeDocument.count({
      where: { parentId: doc.id }
    });
    
    await ctx.reply(
      `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
      `üìÑ ${doc.title}\n` +
      `üìä –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: ${chunksCount}`
    );
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    console.error('URL ingest error:', error);
  }
}

async function handleKBQuery(ctx: Context, query: string) {
  await ctx.reply('üîç –ò—â—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...');
  
  try {
    const response = await ragService.query({
      query,
      topK: 3
    });
    
    let message = 'üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n';
    
    if (response.chunks.length === 0) {
      message += '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
    } else {
      message += '<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:</b>\n';
      for (const chunk of response.chunks) {
        message += `\nüìå ${chunk.content.substring(0, 150)}...\n`;
        message += `   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(chunk.similarity! * 100).toFixed(0)}%\n`;
      }
      
      message += '\n<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n';
      message += response.answer || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç';
      
      if (response.sources.length > 0) {
        message += '\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n';
        for (const source of response.sources) {
          message += `‚Ä¢ ${source.title}\n`;
        }
      }
    }
    
    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
    console.error('KB query error:', error);
  }
}

// Import prisma
import { prisma } from '@real-estate-bot/database';