import { Conversation } from '@grammyjs/conversations';
import { BotContext } from '../types';
import { 
  modeSelectionKeyboard, 
  yesNoKeyboard, 
  skipKeyboard,
  transportModeKeyboard,
  roomsKeyboard,
  createImportanceKeyboard
} from '../utils/keyboards';
import { DEFAULT_LIFE_WEIGHTS, DEFAULT_INVEST_WEIGHTS } from '@real-estate-bot/shared';

export async function mainInterview(conversation: Conversation<BotContext>, ctx: BotContext) {
  // Clear previous session data
  ctx.session.budget = {};
  ctx.session.locations = [];
  ctx.session.commutePoints = [];
  ctx.session.rooms = [];
  ctx.session.weights = {};

  // Step 1: Mode selection
  await ctx.reply(
    'üè† –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å!\n\n' +
    '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞:',
    { reply_markup: modeSelectionKeyboard }
  );

  const modeResponse = await conversation.waitForCallbackQuery(/^mode_/);
  await modeResponse.answerCallbackQuery();
  
  const mode = modeResponse.callbackQuery.data.replace('mode_', '') as 'life' | 'invest';
  ctx.session.interviewMode = mode;
  
  // Set default weights based on mode
  ctx.session.weights = mode === 'life' ? { ...DEFAULT_LIFE_WEIGHTS } : { ...DEFAULT_INVEST_WEIGHTS };

  // Step 2: Budget
  await ctx.reply(
    'üí∞ –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?\n\n' +
    '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: 5000000-8000000\n\n' +
    '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:',
    { reply_markup: skipKeyboard }
  );

  const budgetResponse = await conversation.wait();
  
  if (budgetResponse.callbackQuery?.data !== 'skip' && budgetResponse.message?.text) {
    const budgetText = budgetResponse.message.text;
    const budgetMatch = budgetText.match(/(\d+)(?:\s*-\s*(\d+))?/);
    
    if (budgetMatch) {
      if (budgetMatch[2]) {
        ctx.session.budget = {
          min: parseInt(budgetMatch[1]),
          max: parseInt(budgetMatch[2])
        };
      } else {
        ctx.session.budget = {
          max: parseInt(budgetMatch[1])
        };
      }
    }
  }

  // Step 3: Location (for life mode)
  if (mode === 'life') {
    await ctx.reply(
      'üìç –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ –∏—â–µ—Ç–µ –∂–∏–ª—å–µ?\n\n' +
      '–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:'
    );

    const locationResponse = await conversation.wait();
    if (locationResponse.message?.text) {
      ctx.session.locations = locationResponse.message.text.split(',').map(l => l.trim());
    }

    // Step 4: Commute points
    await ctx.reply(
      'üéØ –ï—Å—Ç—å –ª–∏ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —Ç–æ—á–∫–∏ (—Ä–∞–±–æ—Ç–∞, —à–∫–æ–ª–∞, –¥—Ä.)?\n\n' +
      '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–∂–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:',
      { reply_markup: skipKeyboard }
    );

    const commuteResponse = await conversation.wait();
    if (commuteResponse.callbackQuery?.data !== 'skip' && commuteResponse.message?.text) {
      // For MVP, we'll store as text. In production, we'd geocode these
      const places = commuteResponse.message.text.split(',').map(p => p.trim());
      ctx.session.commutePoints = places.map((place, i) => ({
        name: place,
        lat: 55.7558 + (Math.random() - 0.5) * 0.1, // Mock coordinates
        lng: 37.6173 + (Math.random() - 0.5) * 0.1,
        timeImportance: 8 // Default importance
      }));

      // Ask for transport mode
      await ctx.reply(
        'üöó –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –¥–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å?',
        { reply_markup: transportModeKeyboard }
      );

      const transportResponse = await conversation.waitForCallbackQuery(/^transport_/);
      await transportResponse.answerCallbackQuery();
      ctx.session.transportMode = transportResponse.callbackQuery.data.replace('transport_', '') as any;
    }

    // Step 5: Family situation
    await ctx.reply(
      'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Å–µ–º—å–µ:\n\n' +
      '–ï—Å—Ç—å –ª–∏ –¥–µ—Ç–∏? –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è?',
      { reply_markup: yesNoKeyboard }
    );

    const familyResponse = await conversation.waitForCallbackQuery(/^(yes|no)$/);
    await familyResponse.answerCallbackQuery();
    
    if (familyResponse.callbackQuery.data === 'yes') {
      // Increase importance of schools and parks
      ctx.session.weights.schools = Math.min(10, (ctx.session.weights.schools || 5) + 2);
      ctx.session.weights.parks = Math.min(10, (ctx.session.weights.parks || 5) + 2);
    }
  }

  // Step 6: Rooms
  await ctx.reply(
    'üè† –°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤–∞–º –Ω—É–∂–Ω–æ?\n\n' +
    '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
    { reply_markup: roomsKeyboard }
  );

  const selectedRooms: number[] = [];
  let roomsDone = false;

  while (!roomsDone) {
    const roomResponse = await conversation.waitForCallbackQuery(/^rooms_/);
    await roomResponse.answerCallbackQuery();
    
    if (roomResponse.callbackQuery.data === 'rooms_done') {
      roomsDone = true;
    } else {
      const rooms = parseInt(roomResponse.callbackQuery.data.replace('rooms_', ''));
      if (!selectedRooms.includes(rooms)) {
        selectedRooms.push(rooms);
        await ctx.reply(`‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${selectedRooms.join(', ')} –∫–æ–º–Ω.`);
      }
    }
  }
  
  ctx.session.rooms = selectedRooms;

  // Step 7: Importance factors
  const factors = mode === 'life' 
    ? ['transport', 'schools', 'parks', 'parking', 'noise', 'ecology']
    : ['liquidity', 'constructionStage', 'infrastructure'];

  for (const factor of factors) {
    const factorNames: Record<string, string> = {
      transport: 'üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
      schools: 'üè´ –ë–ª–∏–∑–æ—Å—Ç—å —à–∫–æ–ª/—Å–∞–¥–æ–≤',
      parks: 'üå≥ –ü–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã',
      parking: 'üöó –ù–∞–ª–∏—á–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏',
      noise: 'üîá –¢–∏—à–∏–Ω–∞',
      ecology: 'üåø –≠–∫–æ–ª–æ–≥–∏—è —Ä–∞–π–æ–Ω–∞',
      liquidity: 'üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
      constructionStage: 'üèó –°—Ç–∞–¥–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
      infrastructure: 'üèò –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
    };

    await ctx.reply(
      `–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–µ–Ω —Ñ–∞–∫—Ç–æ—Ä:\n${factorNames[factor]}\n\n` +
      '–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 10:',
      { reply_markup: createImportanceKeyboard(factor) }
    );

    const importanceResponse = await conversation.waitForCallbackQuery(new RegExp(`^importance_${factor}_`));
    await importanceResponse.answerCallbackQuery();
    
    const importance = parseInt(importanceResponse.callbackQuery.data.split('_').pop()!);
    ctx.session.weights![factor] = importance;
  }

  // Step 8: New building preference
  await ctx.reply(
    'üèó –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏?',
    { reply_markup: yesNoKeyboard }
  );

  const newBuildingResponse = await conversation.waitForCallbackQuery(/^(yes|no)$/);
  await newBuildingResponse.answerCallbackQuery();
  ctx.session.newBuilding = newBuildingResponse.callbackQuery.data === 'yes';

  // Step 9: Parking requirement
  if (mode === 'life') {
    await ctx.reply(
      'üöó –ù—É–∂–Ω–∞ –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞?',
      { reply_markup: yesNoKeyboard }
    );

    const parkingResponse = await conversation.waitForCallbackQuery(/^(yes|no)$/);
    await parkingResponse.answerCallbackQuery();
    ctx.session.parkingRequired = parkingResponse.callbackQuery.data === 'yes';
  }

  // Summary
  await ctx.reply(
    '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–±—Ä–∞–ª –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n' +
    `üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n` +
    `‚Ä¢ –¶–µ–ª—å: ${mode === 'life' ? '–ñ–∏–ª—å–µ –¥–ª—è –∂–∏–∑–Ω–∏' : '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'}\n` +
    `‚Ä¢ –ë—é–¥–∂–µ—Ç: ${ctx.session.budget.min ? `–æ—Ç ${ctx.session.budget.min} ` : ''}–¥–æ ${ctx.session.budget.max || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `‚Ä¢ –ö–æ–º–Ω–∞—Ç: ${ctx.session.rooms?.join(', ') || '–ª—é–±–æ–µ'}\n` +
    `‚Ä¢ ${ctx.session.newBuilding ? '–¢–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏' : '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—Ç–æ—Ä–∏—á–∫–∞'}\n\n` +
    'üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...'
  );

  // Save preferences and trigger search
  ctx.session.currentState = 'search_pending';
}