import { Bot, session } from 'grammy';
import { conversations, createConversation } from '@grammyjs/conversations';
import { RedisAdapter } from '@grammyjs/storage-redis';
import Redis from 'ioredis';
import { config } from './config';
import { BotContext, SessionData, CONVERSATIONS } from './types';
import { mainInterview } from './conversations/main-interview';
import { UserService } from './services/user.service';
import { PreferencesService } from './services/preferences.service';
import { mainMenuKeyboard, resultActionsKeyboard } from './utils/keyboards';
import { searchAndScoreListings } from './services/search.service';
import { formatPrice, formatArea } from '@real-estate-bot/shared';

// Create bot instance
const bot = new Bot<BotContext>(config.botToken);

// Setup Redis storage for sessions
const redis = new Redis(config.redisUrl);
const storage = new RedisAdapter({ instance: redis });

// Install session middleware
bot.use(
  session({
    initial: (): SessionData => ({}),
    storage,
  })
);

// Install conversations plugin
bot.use(conversations());

// Register conversations
bot.use(createConversation(mainInterview, CONVERSATIONS.MAIN_INTERVIEW));

// Error handler
bot.catch((err) => {
  console.error('Bot error:', err);
});

// Start command
bot.command('start', async (ctx) => {
  // Ensure user exists in database
  const user = await UserService.findOrCreate(ctx.from!.id);
  ctx.session.userId = user.id;
  ctx.session.user = user;

  await ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!\n\n` +
    `–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –∂–∏–∑–Ω–∏ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n\n` +
    `–ß—Ç–æ —É–º–µ—é:\n` +
    `‚Ä¢ üè† –ü–æ–¥–±–æ—Ä –∂–∏–ª—å—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n` +
    `‚Ä¢ üìä –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–∏—Å—Ç–µ–º–µ match-score\n` +
    `‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö\n` +
    `‚Ä¢ üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –æ–±—ä–µ–∫—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    { reply_markup: mainMenuKeyboard }
  );
});

// Handle menu navigation
bot.callbackQuery('back_to_menu', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageText(
    'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { reply_markup: mainMenuKeyboard }
  );
});

// Start search callbacks
bot.callbackQuery(['search_life', 'search_invest'], async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.conversation.enter(CONVERSATIONS.MAIN_INTERVIEW);
});

// Handle search completion
bot.use(async (ctx, next) => {
  if (ctx.session.currentState === 'search_pending') {
    ctx.session.currentState = undefined;
    
    // Save preferences
    const preferences = await PreferencesService.create({
      userId: ctx.session.userId!,
      mode: ctx.session.interviewMode!,
      weights: ctx.session.weights!,
      budgetMin: ctx.session.budget?.min,
      budgetMax: ctx.session.budget?.max,
      locations: ctx.session.locations || [],
      commutePoints: ctx.session.commutePoints || [],
      transportMode: ctx.session.transportMode,
      rooms: ctx.session.rooms,
      areaMin: ctx.session.areaMin,
      areaMax: ctx.session.areaMax,
      newBuilding: ctx.session.newBuilding,
      parkingRequired: ctx.session.parkingRequired,
    });

    // Perform search
    try {
      const results = await searchAndScoreListings(preferences);
      
      if (results.length === 0) {
        await ctx.reply(
          'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –±—é–¥–∂–µ—Ç\n' +
          '‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–π–æ–Ω—É\n' +
          '‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤',
          { reply_markup: mainMenuKeyboard }
        );
        return;
      }

      // Store results in session
      ctx.session.lastSearchResults = results.map(r => r.listing!.id);
      ctx.session.currentViewingIndex = 0;

      // Show first result
      await showSearchResult(ctx, results[0]);
      
    } catch (error) {
      console.error('Search error:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: mainMenuKeyboard }
      );
    }
  }
  
  await next();
});

// Show search result
async function showSearchResult(ctx: BotContext, result: any) {
  const listing = result.listing;
  const scoreEmoji = result.matchScore >= 8.5 ? 'üî•' : result.matchScore >= 7 ? '‚úÖ' : 'üëç';
  
  let message = `${scoreEmoji} <b>Match Score: ${result.matchScore.toFixed(1)}/10</b>\n\n`;
  message += `<b>${listing.title}</b>\n`;
  message += `üìç ${listing.address}\n`;
  message += `üí∞ ${formatPrice(listing.price)}\n`;
  message += `üè† ${listing.rooms} –∫–æ–º–Ω., ${formatArea(listing.area)}\n`;
  message += `üè¢ ${listing.floor}/${listing.totalFloors} —ç—Ç–∞–∂\n`;
  
  if (listing.isNewBuilding) {
    message += `üèó –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞${listing.stage ? ` (${listing.stage})` : ''}\n`;
    if (listing.developer) {
      message += `üë∑ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: ${listing.developer}\n`;
    }
  }
  
  message += `\n<b>–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:</b>\n${result.explanation}\n`;
  
  message += `\n<b>–û—Ü–µ–Ω–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º:</b>\n`;
  for (const [factor, score] of Object.entries(result.breakdown)) {
    if (score !== undefined && score !== null) {
      const factorNames: Record<string, string> = {
        transport: 'üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        schools: 'üè´ –®–∫–æ–ª—ã',
        parks: 'üå≥ –ü–∞—Ä–∫–∏',
        parking: 'üöó –ü–∞—Ä–∫–æ–≤–∫–∞',
        price: 'üí∞ –¶–µ–Ω–∞',
        metro: 'üöá –ú–µ—Ç—Ä–æ',
      };
      message += `${factorNames[factor] || factor}: ${(score as number).toFixed(1)}/10\n`;
    }
  }

  // Send photo if available
  if (listing.photos && listing.photos.length > 0) {
    await ctx.replyWithPhoto(listing.photos[0], {
      caption: message,
      parse_mode: 'HTML',
      reply_markup: resultActionsKeyboard,
    });
  } else {
    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: resultActionsKeyboard,
    });
  }
}

// Settings callback
bot.callbackQuery('settings', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
});

// My queries callback
bot.callbackQuery('my_queries', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('üìã –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
});

// Start bot
async function start() {
  console.log('Starting bot...');
  
  // Set bot commands
  await bot.api.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'search', description: '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫' },
    { command: 'queries', description: '–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã' },
    { command: 'settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
    { command: 'help', description: '–ü–æ–º–æ—â—å' },
  ]);

  // Start polling
  bot.start({
    onStart: () => console.log('Bot started successfully'),
  });
}

// Handle graceful shutdown
process.once('SIGINT', () => bot.stop());
process.once('SIGTERM', () => bot.stop());

// Start the bot
start().catch(console.error);