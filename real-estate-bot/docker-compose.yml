version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: realestate-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: realestate
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for sessions
  redis:
    image: redis:7-alpine
    container_name: realestate-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot
    container_name: realestate-bot
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/realestate
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: realestate-api
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/realestate
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Mini App (Next.js)
  mini-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: mini-app
    container_name: realestate-mini-app
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/realestate
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3002
      API_URL: http://api:3001
    ports:
      - "3002:3002"
    depends_on:
      - api
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: realestate-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - mini-app
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data: